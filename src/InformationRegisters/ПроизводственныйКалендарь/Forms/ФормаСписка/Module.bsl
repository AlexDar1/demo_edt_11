
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НомерТекущегоГода = 0 Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	НомерПредыдущегоГода	= НомерТекущегоГода;
	
	Элементы.Календарь.НачалоПериодаОтображения	= Дата(НомерТекущегоГода, 1, 1);
	Элементы.Календарь.КонецПериодаОтображения	= Дата(НомерТекущегоГода, 12, 31);
		
	ПрочитатьДанныеПроизводственногоКалендаря(НомерТекущегоГода);
	
	ЦветаВидовДней = Новый ФиксированноеСоответствие(ЦветаОформленияВидовДнейПроизводственногоКалендаря());
	
	ЦветОформленияДняПоУмолчанию = ЦветаВидовДней.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.ПустаяСсылка());
	
	СписокВидовДня = СписокВидовДня();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеПроизводственногоКалендаря(НомерГода)
	
	// Загрузка данных производственного календаря за указанный год
	
	ДанныеПроизводственногоКалендаря.Загрузить(ДанныеПроизводственногоКалендаря(НомерГода));
	
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейПроизводственногоКалендаря());
	
КонецПроцедуры

// Функция читает данные производственного календаря из регистра
//
// Параметры
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника
//	НомерГода							- Номер года, за который необходимо прочитать производственный календарь
//
// Возвращаемое значение
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря
//
&НаСервере
Функция ДанныеПроизводственногоКалендаря(НомерГода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала",		Дата(НомерГода,1,1));
	Запрос.УстановитьПараметр("ДатаОкончания",	Дата(НомерГода,12,31));	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроизводственныйКалендарь.Дата,
	|	ПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ГДЕ
	|	ПроизводственныйКалендарь.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция определяет соответствие видов дня производственного календаря и цвета оформления
// этого дня в поле календаря
//
// Возвращаемое значение
//	ЦветаОформления - соответствие видов дня и цветов оформления
//
&НаСервере
Функция ЦветаОформленияВидовДнейПроизводственногоКалендаря()
	
	ЦветаОформления = Новый Соответствие;
	
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.ПустаяСсылка(),	WebЦвета.Красный);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий,			WebЦвета.Черный);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота,			WebЦвета.ТемноКрасный);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье,		WebЦвета.Красный);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный,	WebЦвета.ТемноСиний);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник,			WebЦвета.Фиолетовый);
	
	Возврат ЦветаОформления;
	
КонецФункции

// Функция составляет список всевозможных видов дней производственного календаря 
// по метаданным перечисления ВидыДнейПроизводственногоКалендаря
//
// Возвращаемое значение
//	СписокВидовДня - список значений, содержащий значение перечисления 
//  					и его синоним в качестве представления
//
&НаСервере
Функция СписокВидовДня()
	
	СписокВидовДня = Новый СписокЗначений;
	
	Для Каждого МетаданныеВидаДней Из Метаданные.Перечисления.ВидыДнейПроизводственногоКалендаря.ЗначенияПеречисления Цикл
		СписокВидовДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря[МетаданныеВидаДней.Имя], МетаданныеВидаДней.Синоним);
	КонецЦикла;
	
	Возврат СписокВидовДня;
	
КонецФункции

&НаСервере
Функция ВидыДнейПроизводственногоКалендаря()
	
	ВидыДнейПроизводственногоКалендаря = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ДанныеПроизводственногоКалендаря Цикл
		ВидыДнейПроизводственногоКалендаря.Вставить(СтрокаТаблицы.Дата, СтрокаТаблицы.ВидДня);
	КонецЦикла;
	
	Возврат ВидыДнейПроизводственногоКалендаря;
	
КонецФункции

&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		ЦветОформленияДня = ЦветаВидовДней.Получить(ВидыДней.Получить(СтрокаОформленияПериода.Дата));
		СтрокаОформленияПериода.ЦветТекста = ?(ЦветОформленияДня = Неопределено, ЦветОформленияДняПоУмолчанию, ЦветОформленияДня);
	КонецЦикла;	
	
КонецПроцедуры


&НаКлиенте
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
	Если Модифицированность Тогда
		ТекстСообщения = "Записать измененные данные за "+НомерПредыдущегоГода+" год?";
		
		Если Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписатьДанныеПроизводственногоКалендаря();
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьФорму();	
	
	Модифицированность = Ложь;
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФорму()
	
	Если НомерТекущегоГода = 0 Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	НомерПредыдущегоГода	= НомерТекущегоГода;
	
	Элементы.Календарь.НачалоПериодаОтображения	= Дата(НомерТекущегоГода, 1, 1);
	Элементы.Календарь.КонецПериодаОтображения	= Дата(НомерТекущегоГода, 12, 31);
		
	ПрочитатьДанныеПроизводственногоКалендаря(НомерТекущегоГода);
	
КонецПроцедуры

// Процедура записывает данные производственного календаря в регистр
//
// Параметры
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника
//	НомерГода							- Номер года, за который необходимо записать производственный календарь
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря
//
// Возвращаемое значение
//	Нет
//
&НаСервере
Процедура ЗаписатьДанныеПроизводственногоКалендаря()
	
	НаборЗаписей = РегистрыСведений.ПроизводственныйКалендарь.СоздатьНаборЗаписей();
	
	Для Каждого Строка Из ДанныеПроизводственногоКалендаря Цикл
		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.Дата.Установить(Строка.Дата);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьДень(Команда)
	
	ВыделенныеДаты = Элементы.Календарь.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() > 0 И Год(ВыделенныеДаты[0]) = НомерТекущегоГода Тогда
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВидовДня, , СписокВидовДня.НайтиПоЗначению(ВидыДней.Получить(ВыделенныеДаты[0])));
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ИзменитьВидыДней(ВыделенныеДаты, ВыбранныйЭлемент.Значение);
			Элементы.Календарь.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДень(Команда)
	
	ВыделенныеДаты = Элементы.Календарь.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Или Год(ВыделенныеДаты[0]) <> НомерТекущегоГода Тогда
		Возврат;
	КонецЕсли;
		
	ПереносимыйДень = ВыделенныеДаты[0];
	ВидДня = ВидыДней.Получить(ПереносимыйДень);
	
	ПараметрыВыбораДаты = Новый Структура;
	ПараметрыВыбораДаты.Вставить("НачальноеЗначение",			ПереносимыйДень);
	ПараметрыВыбораДаты.Вставить("НачалоПериодаОтображения",	НачалоГода(Календарь));
	ПараметрыВыбораДаты.Вставить("КонецПериодаОтображения",		КонецГода(Календарь));
	ПараметрыВыбораДаты.Вставить("Заголовок",					НСтр("ru = 'Выбор даты переноса'"));
	ПараметрыВыбораДаты.Вставить("ПоясняющийТекст",				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru = 'Выберите дату, на которую будет осуществлен перенос дня %1 (%2)'"), 
																Формат(ПереносимыйДень, "ДФ='д ММММ'"), 
																ВидДня));
	
	ВыбраннаяДата = ОткрытьФормуМодально("ОбщаяФорма.ВыборДаты", ПараметрыВыбораДаты);
	
	Если ВыбраннаяДата <> Неопределено Тогда
		ПеренестиВидДня(ПереносимыйДень, ВыбраннаяДата, ВидДня);
		Элементы.Календарь.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидыДней(ДатыДней, ВидДня)
	
	ВидыДнейПроизводственногоКалендаря = Новый Соответствие;
	Для Каждого КлючИЗначение Из ВидыДней Цикл
		ВидыДнейПроизводственногоКалендаря.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Для Каждого ВыбраннаяДата Из ДатыДней Цикл
		НайденныеСтроки = ДанныеПроизводственногоКалендаря.НайтиСтроки(Новый Структура("Дата", ВыбраннаяДата));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДанных = ДанныеПроизводственногоКалендаря.Добавить();
			СтрокаДанных.Дата = ВыбраннаяДата;
		Иначе
			СтрокаДанных = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаДанных.ВидДня = ВидДня;
		ВидыДнейПроизводственногоКалендаря.Вставить(ВыбраннаяДата, ВидДня);
	КонецЦикла;
	
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейПроизводственногоКалендаря);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВидДня(ПереносимыйДень, ДатаПереноса, ВидДня)
	
	ВидДняДатыПереноса = ВидыДней.Получить(ДатаПереноса);
	
	ДатаПереносаВМассиве = Новый Массив;
	ДатаПереносаВМассиве.Добавить(ДатаПереноса);
	
	ПереносимыйДеньВМассиве = Новый Массив;
	ПереносимыйДеньВМассиве.Добавить(ПереносимыйДень);
	
	ИзменитьВидыДней(ДатаПереносаВМассиве,    ВидДня);
	ИзменитьВидыДней(ПереносимыйДеньВМассиве, ВидДняДатыПереноса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГодПоУмолчанию(Команда)
	ЗаполнитьГодПоУмолчаниюНаСервере();
	Элементы.Календарь.Обновить();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГодПоУмолчаниюНаСервере()
	
	ВидыДнейПроизводственногоКалендаря = Новый Соответствие;
	Для Каждого КлючИЗначение Из ВидыДней Цикл
		ВидыДнейПроизводственногоКалендаря.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;	
	ТекущийДень = Дата(НомерТекущегоГода,1,1);
	
	Пока ТекущийДень < Дата(НомерТекущегоГода+1,1,1) Цикл
		
		НайденныеСтроки = ДанныеПроизводственногоКалендаря.НайтиСтроки(Новый Структура("Дата", ТекущийДень));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДанных = ДанныеПроизводственногоКалендаря.Добавить();
			СтрокаДанных.Дата = ТекущийДень;
		Иначе
			СтрокаДанных = НайденныеСтроки[0];
		КонецЕсли;
		
		Если ДеньНедели(ТекущийДень)>=1 И ДеньНедели(ТекущийДень)<=5 Тогда
			ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
		ИначеЕсли ДеньНедели(ТекущийДень)=6 Тогда
			ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
		ИначеЕсли ДеньНедели(ТекущийДень)=7	Тогда
			ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье;
		КонецЕсли;
		
		СтрокаДанных.ВидДня = ВидДня;
		ВидыДнейПроизводственногоКалендаря.Вставить(ТекущийДень, ВидДня);		
		ТекущийДень = ТекущийДень + 60*60*24;
		
	КонецЦикла;
	
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейПроизводственногоКалендаря);	
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	ЗаписатьДанныеПроизводственногоКалендаря();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ЗаписатьДанныеПроизводственногоКалендаря();
//	Закрыть();
КонецПроцедуры










